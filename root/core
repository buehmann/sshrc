#!/usr/bin/env bash
set -euo pipefail

SSHRC_ROOT=$(dirname "$BASH_SOURCE")
SSHRC_HOME=${SSHRC_HOME:=~/.config/sshrc}

fatal() {
  echo >&2 "$*"
  exit 1
}

boot() {
  if command -v base64; then
    _base64() { base64 "$@"; }
  elif command -v openssl; then
    _base64() { openssl base64 "$@"; }
  else
    fatal "base64 not found"
  fi
} > /dev/null

client() {
  destination=$1
  shift
  bootstrap="exec bash --norc -c $(sh_escape "$(bootstrap "$@")")"
  options=()
  if (($# == 0)); then
    options+=(-t)
  fi
  ssh "${options[@]}" "$destination" "$bootstrap"
}

sh_escape() {
  echo "'${1//"'"/"'\\''"}'"
}

bootstrap() {
  declare -f fatal boot init unpack signal_handlers
  echo 'init'
  send "$SSHRC_ROOT" '"$SSHRC_ROOT"'
  if [[ -d "$SSHRC_HOME" ]]; then
    send "$SSHRC_HOME" '"$SSHRC_HOME"'
  fi
  echo -n 'exec "$SSHRC_ROOT/core" server'
  if (($# > 0)); then
    printf ' %q' "$@"
  fi
  echo
}

signal_handlers() {
  trap 'rm -rf "$SSHRC_TMP"' EXIT
}

init() {
  set -euo pipefail
  boot
  export SSHRC_TMP=$(mktemp -d -t sshrc.XXXXXXXX)
  signal_handlers

  export SSHRC_ROOT=$SSHRC_TMP/root
  export SSHRC_HOME=$SSHRC_TMP/home
  mkdir "$SSHRC_ROOT" "$SSHRC_HOME"
}

send() {
  local from=$1 to=$2
  echo "unpack $to << __"
  pack "$from"
  echo '__'
}

unpack() {
  _base64 -d | tar xz -C "$1"
}

pack() {
  tar cz -h -C "$1" . | _base64
}

server() {
  signal_handlers
  export SSHRC_SESSION_TYPE=shell
  if (($# > 0)); then
    SSHRC_SESSION_TYPE=command
  fi
  "$SSHRC_ROOT/shell" ${*+-c "$*"}
}

boot
mode=$1
shift

case $mode in
  client|server) $mode "$@" ;;
  *) fatal "Unknown mode '$mode'" ;;
esac
